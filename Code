{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import logging\n",
        "import logging.config\n",
        "import pandas as pd\n",
        "import csv\n",
        "from preprosessor import preprocess_dataset\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import LinearSVC\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.metrics import confusion_matrix, classification_report\n",
        "from sklearn.metrics import precision_score, recall_score, f1_score\n",
        "from sklearn.model_selection import cross_val_predict\n",
        "from sklearn.pipeline import make_pipeline, Pipeline\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n",
        "from collections import OrderedDict"
      ],
      "metadata": {
        "id": "7HM8uhAABOcr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "logger = logging.getLogger(__name__)\n"
      ],
      "metadata": {
        "id": "jIR12usEBu7t"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def cross_validation_model_analysis(all_features, all_labels):"
      ],
      "metadata": {
        "id": "RgBQRWveB7KM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "logger.info(\"Total size of the dataset (num of phrases): \" + str(len(all_features)))"
      ],
      "metadata": {
        "id": "cEuCgE13B7Gm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "logger.info(\"Beginning pipeline execution\")"
      ],
      "metadata": {
        "id": "JFoY_IkCB7Ec"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "estimators_dict = OrderedDict([('MultiNomialNB', MultinomialNB()), \\\n",
        "\t\t\t\t\t\t('LinearSVC', LinearSVC()), \\\n",
        "\t\t\t\t\t\t('LogisticRegression', LogisticRegression(n_jobs = -1)), \\\n",
        "\t\t\t\t\t\t('DecisionTreeClassifier', DecisionTreeClassifier(min_samples_split=2000, \\min_samples_leaf=200))])"
      ],
      "metadata": {
        "id": "KkXFi2DeB7Bn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "transformers_dict = OrderedDict([('tf-idf', TfidfVectorizer()), \\\n",
        "\t\t\t\t\t\t  \t\t\t\t('bag_of_words', CountVectorizer(ngram_range=(1, 2)))])"
      ],
      "metadata": {
        "id": "2778_L1pB6-9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for transformer_name, transformer in transformers_dict.items():\n",
        "\t\tf.write(\"\\nFeature type: \" + transformer_name + \"\\n\\n\")\n",
        "\t\tlogger.info(\"*\"*100)\n",
        "\t\tlogger.info(\"For feature transformation using : \" + transformer_name)\n",
        "\t\tsteps.append((transformer_name, transformer))"
      ],
      "metadata": {
        "id": "zKClqgJPB68M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for estimator_name, estimator in estimators_dict.items():"
      ],
      "metadata": {
        "id": "1kw5EFW_B65H"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "logger.info(\"Running the model with : \" + estimator_name)\n",
        "\t\t\tsteps.append((estimator_name, estimator))\n",
        "\t\t\tmodel = Pipeline(steps)\n",
        "\t\t\tpredicted_labels = cross_val_predict(model, all_features,all_labels, \\\n",
        "\t\t\t\t\t\t\t\t\t\t\t\t cv = 5, n_jobs = -1, verbose = 100)"
      ],
      "metadata": {
        "id": "iKyHaeElB62Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "recall = round(recall_score(all_labels, predicted_labels, average = 'weighted'),2)\n",
        "\t\t\tprecision = round(precision_score(all_labels, predicted_labels, average = 'weighted'),2)\n",
        "\t\t\tf1 = round(f1_score(all_labels, predicted_labels, average = 'weighted'),2)\n",
        "\t\t\treport = classification_report(all_labels, predicted_labels)\n",
        "\t\t\tconf_matrix = confusion_matrix(all_labels, predicted_labels)"
      ],
      "metadata": {
        "id": "EofqKlqyB6zX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "logger.info(\"recall score: \" + str(recall))\n",
        "\t\t\tlogger.info(\"precision score: \" + str(precision))\n",
        "\t\t\tlogger.info(\"f1 score: \" + str(f1))\n",
        "\t\t\tlogger.info(\"confusion matrix: \\n\" + str(conf_matrix))\n",
        "\t\t\tlogger.info(\"classification report: \\n\" + report)\n"
      ],
      "metadata": {
        "id": "jp4n-ztRB6w0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "logger.info(\"*\"*70)"
      ],
      "metadata": {
        "id": "_RAGKu8fB6tv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "f.write(estimator_name + \" : \" + str(f1) + \"\\n\")\n"
      ],
      "metadata": {
        "id": "13UJnBZfB6rB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "del steps[1]"
      ],
      "metadata": {
        "id": "oTA_zMt4B6oL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "f.write(\"-\"*50)"
      ],
      "metadata": {
        "id": "4hlUhuZRB6lk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "del steps[0]"
      ],
      "metadata": {
        "id": "qz37W7BSB6i4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "f.close()"
      ],
      "metadata": {
        "id": "Eb1CVTzOB6gM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def main():"
      ],
      "metadata": {
        "id": "z4_4-hDuB6dk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "logging.basicConfig(level=logging.DEBUG,\n",
        "\t\t\t\t\t\tformat='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',\n",
        "\t\t\t\t\t\tdatefmt='%m-%d %H:%M',\n",
        "\t\t\t\t\t\tfilename='reviews_classification.log',\n",
        "\t\t\t\t\t\tfilemode='w')"
      ],
      "metadata": {
        "id": "N8abY7iXB6bH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "console = logging.StreamHandler()\n",
        "\tconsole.setLevel(logging.INFO)\n",
        "\tformatter = logging.Formatter('%(name)-12s: %(levelname)-8s %(message)s')\n",
        "\tconsole.setFormatter(formatter)\n",
        "\tlogging.getLogger('').addHandler(console)\n"
      ],
      "metadata": {
        "id": "PVO0agD9B6Y8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_file = \"train.tsv\"\t\n",
        "\ttrain_features, train_labels = preprocess_dataset(train_file, is_train = True)"
      ],
      "metadata": {
        "id": "kOEgN-yvB6V5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cross_validation_model_analysis(train_features, train_labels)"
      ],
      "metadata": {
        "id": "MoEqFsiLB6Sj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "classifiy_reviews(train_features, train_labels, \"test.tsv\")\n"
      ],
      "metadata": {
        "id": "mo8vucxvB6Ph"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def classifiy_reviews(train_features, train_labels, test_dataset_file):"
      ],
      "metadata": {
        "id": "OkcnzOvyB59z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(test_dataset_file, delimiter=\"\\t\")\n",
        "\tphrase_ids = df['PhraseId'].tolist()\n",
        "\ttest_features = preprocess_dataset(test_dataset_file, is_train = False)"
      ],
      "metadata": {
        "id": "4Yo7la-zEUKm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "logger.info(\"Train data size: \" + str(len(train_features)))\n",
        "\tlogger.info(\"Train label size: \" + str(len(train_labels)))"
      ],
      "metadata": {
        "id": "hj-vgVgEEUG-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "logger.info(\"Begin vectorisation of features\")\n",
        "\tvectorizer = TfidfVectorizer()\t\n",
        "\ttrain_features = vectorizer.fit_transform(train_features)\n",
        "\ttest_features = vectorizer.transform(test_features)\n",
        "\tlogger.info(\"Finished vectorisation of features\")\n"
      ],
      "metadata": {
        "id": "e2mLW6pmEUEX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "logger.info(\"Begin classification of the test data\")\n",
        "\tsvc = MLPClassifier(learning_rate = 'adaptive', max_iter = 100, shuffle = True, \\\n",
        "\t\t\t\t\t\tverbose = 100, warm_start = True, early_stopping = True)\n",
        "\tsvc.fit(train_features, train_labels)\n",
        "\tpredictions = svc.predict(test_features)\n",
        "\tlogger.info(\"Finished classification of the test data\")"
      ],
      "metadata": {
        "id": "7moJwGCqEUB9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "logger.info(\"Test data size: \" + str(test_features.shape[0]))\n",
        "\tlogger.info(\"Test label (predictions) size: \" + str(predictions.shape[0]))\n"
      ],
      "metadata": {
        "id": "XPAzcRf-ET_b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "with open('results.csv', 'w') as f:\n",
        "\t\twriter = csv.writer(f)\n",
        "\t\twriter.writerow([\"PhraseId\",\"Sentiment\"])\n",
        "\t\twriter.writerows(zip(phrase_ids, predictions))"
      ],
      "metadata": {
        "id": "DVsXV7hRET8a"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "if __name__ == '__main__':"
      ],
      "metadata": {
        "id": "MsVRipQDEofF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "main()"
      ],
      "metadata": {
        "id": "_NhZuX4WErjp"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
